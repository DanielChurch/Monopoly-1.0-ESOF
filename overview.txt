Names Of Team: Daniel Church, Dieter Grosswiler, Dylan Wickham, Will Brensdal

Interesting class relationships, design approaches, things that gave you trouble, etc:

Interesting relationships/design approaches:
 - A few of our functions used other functions to reduce repetition in the code and make them more readable.
   - For example, dot(other) => x * other.x + y * other.y + z * other.z, and magnitude() => sqrt(x * x + y * y + z * z).
     If we just use dot in magnitude, it turns out to be just sqrt(dot(this)).
   - A similar situation for negate(), since we are just scaling by -1 for each component, we can just use negate() => scale(-1).
   - For the equals() function, we thought about what it meant for a vector to be equal, and how to best check that.
     We concluded that checking the length of the difference of the two vectors and comparing that to 0 would be the simplest implementation.
     This leads to our implementation of: equals(other) => sub(other).magnitude() == 0.  Of course, decimal calculations aren't exact so we had to add some tolerance.
     We decided that a threshold of around 0.000000000001d works well for our all tests and was still very precise.
     
Things that gave us trouble:
Interestingly enough, the only thing that really gave us much trouble was dependencies on other group members functions for our own.
Since we use subtract() in equals(), nearly every test was depending on subtract().
While equals() was written and pushed to git as one of the first functions done, subtract() was one of the last (Partially due to strict code review).
This made it difficult for each team member to test their functions.

Contributions by each team member:
 - Daniel Church: Basic class structure, magnitude(), equals() functions & tests 120 minutes
 - Dieter Grosswiler: scale(), toString() functions & tests
 - Dylan Wickham: dot(), subtract() functions & tests 73 minutes
 - Will Brensdal: add(), negate() functions & tests
